service:
  name: ${self:custom.apiEntity}-service

plugins:
  - serverless-webpack
  - serverless-offline

package:
  individually: true
  include:
    - src/**

custom:
  apiEntity: todos # plural
  version: v1
  tableName: ${self:custom.apiEntity}-${self:custom.version}-db
  pathPrefix: ${self:custom.version}/${self:custom.apiEntity}
  serverless-offline:
    host: 0.0.0.0
    port: ${env:API_PORT, '3000'}

provider:
  name: aws
  runtime: nodejs10.x
  region: ${opt:region, 'eu-west-2'}
  memorySize: 512
  environment:
    API_ENTITY: ${self:custom.apiEntity}
    API_OFFLINE_PORT: ${env:API_PORT, '3000'}
    DYNAMO_OFFLINE_PORT: ${env:DYNAMO_PORT, '8000'}
    DELETE_TOPIC_ARN: !Ref SNSTopicDelete
    POST_TOPIC_ARN: !Ref SNSTopicPost
    PUT_TOPIC_ARN: !Ref SNSTopicPut
    TABLE_NAME: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - 'dynamodb:PutItem'
        - 'dynamodb:GetItem'
        - 'dynamodb:DeleteItem'
        - 'dynamodb:Scan'
      Resource:
        Fn::GetAtt:
          - DynamoTable
          - Arn
    - Effect: 'Allow'
      Action:
        - 'sns:Publish'
      Resource:
        - Ref: SNSTopicPut
        - Ref: SNSTopicDelete

functions:
  post:
    handler: src/post.handler
    events:
      - http:
          method: post
          path: ${self:custom.pathPrefix}
          cors: true
  get:
    handler: src/get.handler
    events:
      - http:
          method: get
          path: ${self:custom.pathPrefix}/{id}
          cors: true
  list:
    handler: src/list.handler
    events:
      - http:
          method: get
          path: ${self:custom.pathPrefix}
          cors: true
  put:
    handler: src/put.handler
    events:
      - http:
          method: put
          path: ${self:custom.pathPrefix}/{id}
          cors: true
  delete:
    handler: src/delete.handler
    events:
      - http:
          method: delete
          path: ${self:custom.pathPrefix}/{id}
          cors: true

resources:
  Resources:
    DynamoTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        SSESpecification:
          SSEEnabled: true
    SNSTopicPost:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service.name}-${self:custom.apiEntity}-create
    SSMTopicPost:
      Type: AWS::SSM::Parameter
      Properties:
        Description: "SNS topic for ${self:custom.apiEntity} post events"
        Name: ${self:custom.apiEntity}-created
        Type: String
        Value: !Ref SNSTopicPost
    SNSTopicPut:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service.name}-${self:custom.apiEntity}-update
    SSMTopicPut:
      Type: AWS::SSM::Parameter
      Properties:
        Description: "SNS topic for ${self:custom.apiEntity} put events"
        Name: ${self:custom.apiEntity}-updated
        Type: String
        Value: !Ref SNSTopicPut
    SNSTopicDelete:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: ${self:service.name}-${self:custom.apiEntity}-delete
    SSMTopicDeleted:
      Type: AWS::SSM::Parameter
      Properties:
        Description: "SNS topic for ${self:custom.apiEntity} deleted events"
        Name: ${self:custom.apiEntity}-deleted
        Type: String
        Value: !Ref SNSTopicDelete
